## Dynamic Page 에디터 변경 사항 요약 (req.txt 기반)

### 1. 신규 라우터 및 상태 저장소 생성
- **라우터 복사:** 기존 `editor` 라우터의 모든 파일을 `dynamic_page` 라는 새로운 라우터로 복사했습니다.
- **상태 저장소 분리:** `editorStore.ts`를 `dynamicEditorStore.ts`로 복사하여 `dynamic_page` 에디터 전용 상태 관리 로직을 분리했습니다.
- **연결 수정:** `dynamic_page` 내의 모든 컴포넌트가 새로운 `dynamicEditorStore`를 사용하도록 import 경로를 수정했습니다.

### 2. 핵심 데이터 구조 변경 (레이어 기능 지원)
- **`Region` 인터페이스 수정:** `dynamicEditorStore`에서 한 영역(`Region`)이 단 하나의 콘텐츠(`content`)만 가질 수 있었던 구조를, 여러 개의 레이어(`layers`)를 배열로 가질 수 있도록 변경했습니다.
- **`Layer` 인터페이스 정의:** 각 레이어는 `id`, `type` (이미지, 비디오, 텍스트 등), `src` (소스), `style` (위치, 크기, z-index 등) 속성을 가지는 `Layer` 인터페이스를 새로 정의했습니다.

### 3. TDD를 통한 `addLayer` 액션 구현
- **테스트 환경 설정:** Jest, React Testing Library 등 테스트에 필요한 라이브러리를 설치하고 환경을 구성했습니다.
- **테스트 주도 개발:**
  1. **(Red)** `addLayer` 액션이 없기 때문에 실패하는 테스트 케이스를 먼저 작성했습니다.
  2. **(Green)** 테스트를 통과시키기 위해 `dynamicEditorStore`에 `addLayer` 액션을 구현했습니다.
  3. **(Refactor)** 더 이상 필요 없는 `updateRegionContent` 함수를 제거하여 코드를 정리했습니다.

### 4. UI 로직 수정 (레이어 렌더링 및 추가)
- **레이어 렌더링:** `Region.tsx` 컴포넌트가 `layers` 배열을 순회하며 모든 레이어를 화면에 렌더링하도록 수정했습니다. 이를 통해 여러 콘텐츠가 겹쳐 보일 수 있습니다.
- **콘텐츠 추가 로직 변경:**
  - `new/page.tsx`에서 파일이나 텍스트를 추가할 때, 기존 `updateRegionContent` 대신 새로운 `addLayer` 액션을 호출하도록 로직을 변경했습니다.
  - `ContentTypeModal.tsx`에 "텍스트" 유형을 추가하여 사용자가 텍스트 레이어를 생성할 수 있도록 했습니다.

### 5. 빌드 오류 수정 및 안정화
- `npm run build`를 반복적으로 실행하여 데이터 구조 변경으로 인해 발생한 다수의 타입 에러 및 린트 경고를 모두 수정했습니다.
- 이 과정에서 `RegionControls.tsx`, `SceneEditor.tsx` 등 여러 컴포넌트의 코드��� 새로운 데이터 구조에 맞게 업데이트했습니다.

### 6. 사이드바 메뉴 추가
- `Sidebar.tsx` 파일을 수정하여 "Dynamic Page" > "다이나믹 에디터" 메뉴를 추가했습니다. 이를 통해 브라우저에서 쉽게 새로운 에디터에 접근할 수 있습니다.